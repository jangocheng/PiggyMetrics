// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/auth.proto
#region Designer generated code

using System; 
using System.Threading.Tasks; 
using DotBPE.Rpc; 
using DotBPE.Protocol.Amp; 
using Google.Protobuf; 

namespace PiggyMetrics.Common {

//start for class AbstractAuthService
public abstract class AuthServiceBase : ServiceActorBase 
{
public override string Id => "1002$0";
//调用委托
private async Task ReceiveCreateAsync(IRpcContext<AmpMessage> context, AmpMessage req)
{
var request = UserReq.Parser.ParseFrom(req.Data);
var data = await CreateAsync(request);
var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
response.Sequence = req.Sequence;
response.Data = data.ToByteArray();
await context.SendAsync(response);
}

//抽象方法
public abstract Task<VoidRsp> CreateAsync(UserReq request);
//调用委托
private async Task ReceiveAuthAsync(IRpcContext<AmpMessage> context, AmpMessage req)
{
var request = UserReq.Parser.ParseFrom(req.Data);
var data = await AuthAsync(request);
var response = AmpMessage.CreateResponseMessage(req.ServiceId, req.MessageId);
response.Sequence = req.Sequence;
response.Data = data.ToByteArray();
await context.SendAsync(response);
}

//抽象方法
public abstract Task<AuthRsp> AuthAsync(UserReq request);
public override Task ReceiveAsync(IRpcContext<AmpMessage> context, AmpMessage req)
{
switch(req.MessageId){
//方法AuthService.Create
case 1: return this.ReceiveCreateAsync(context, req);
//方法AuthService.Auth
case 2: return this.ReceiveAuthAsync(context, req);
default: return base.ReceiveNotFoundAsync(context, req);
}
}
}
//end for class AbstractAuthService
}

#endregion

