// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/statistics.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PiggyMetrics.Common {

  /// <summary>Holder for reflection information generated from services/statistics.proto</summary>
  public static partial class StatisticsReflection {

    #region Descriptor
    /// <summary>File descriptor for services/statistics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatisticsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlzZXJ2aWNlcy9zdGF0aXN0aWNzLnByb3RvEgZkb3RicGUaE2RvdGJwZV9v",
            "cHRpb24ucHJvdG8aDW1lc3NhZ2UucHJvdG8iMAoHU3RhdFJzcBIlCgpkYXRh",
            "X3BvaW50GAEgAygLMhEuZG90YnBlLkRhdGFQb2ludCJsCgpDb252ZXJ0UmVx",
            "EicKDWN1cnJlbmN5X2Zyb20YASABKA4yEC5kb3RicGUuQ3VycmVuY3kSJQoL",
            "Y3VycmVuY3lfdG8YAiABKA4yEC5kb3RicGUuQ3VycmVuY3kSDgoGYW1vdW50",
            "GAMgASgBIhwKCkNvbnZlcnRSc3ASDgoGYW1vdW50GAEgASgBIisKCkl0ZW1N",
            "ZXRyaWMSDQoFdGl0bGUYASABKAkSDgoGYW1vdW50GAIgASgBIiYKB1JhdGVS",
            "c3ASGwoFcmF0ZXMYASADKAsyDC5kb3RicGUuUmF0ZSI4CgRSYXRlEiIKCGN1",
            "cnJlbmN5GAEgASgOMhAuZG90YnBlLkN1cnJlbmN5EgwKBHJhdGUYAiABKAEi",
            "mgEKCURhdGFQb2ludBIPCgdhY2NvdW50GAEgASgJEgwKBGRhdGUYAiABKAkS",
            "IwoHaW5jb21lcxgDIAMoCzISLmRvdGJwZS5JdGVtTWV0cmljEiQKCGV4cGVu",
            "c2VzGAQgAygLMhIuZG90YnBlLkl0ZW1NZXRyaWMSIwoEc3RhdBgFIAMoCzIV",
            "LmRvdGJwZS5EYXRhUG9pbnRTdGF0IkgKDURhdGFQb2ludFN0YXQSJwoLc3Rh",
            "dF9tZXRyaWMYASABKA4yEi5kb3RicGUuU3RhdE1ldHJpYxIOCgZhbW91bnQY",
            "AiABKAEqPQoKU3RhdE1ldHJpYxIKCgZTTU5PTkUQABIKCgZJTkNPTUUQARIL",
            "CgdFWFBFTlNFEAISCgoGU0FWSU5HEAMylgEKEVN0YXRpc3RpY3NTZXJ2aWNl",
            "EjoKEFVwZGF0ZVN0YXRpc3RpY3MSDy5kb3RicGUuQWNjb3VudBoPLmRvdGJw",
            "ZS5Wb2lkUnNwIgTQ8xgBEj4KDUZpbmRCeUFjY291bnQSFi5kb3RicGUuRmlu",
            "ZEFjY291bnRSZXEaDy5kb3RicGUuU3RhdFJzcCIE0PMYARoFyPMY6wcyhQEK",
            "D0V4Y2hhbmdlU2VydmljZRIyCghHZXRSYXRlcxIPLmRvdGJwZS5Wb2lkUmVx",
            "Gg8uZG90YnBlLlJhdGVSc3AiBNDzGAESNwoHQ29udmVydBISLmRvdGJwZS5D",
            "b252ZXJ0UmVxGhIuZG90YnBlLkNvbnZlcnRSc3AiBNDzGAIaBcjzGOwHQhhI",
            "AaoCE1BpZ2d5TWV0cmljcy5Db21tb25QAFABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DotBPE.ProtoBuf.DotbpeOptionReflection.Descriptor, global::PiggyMetrics.Common.MessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PiggyMetrics.Common.StatMetric), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.StatRsp), global::PiggyMetrics.Common.StatRsp.Parser, new[]{ "DataPoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.ConvertReq), global::PiggyMetrics.Common.ConvertReq.Parser, new[]{ "CurrencyFrom", "CurrencyTo", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.ConvertRsp), global::PiggyMetrics.Common.ConvertRsp.Parser, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.ItemMetric), global::PiggyMetrics.Common.ItemMetric.Parser, new[]{ "Title", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.RateRsp), global::PiggyMetrics.Common.RateRsp.Parser, new[]{ "Rates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.Rate), global::PiggyMetrics.Common.Rate.Parser, new[]{ "Currency", "Rate_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.DataPoint), global::PiggyMetrics.Common.DataPoint.Parser, new[]{ "Account", "Date", "Incomes", "Expenses", "Stat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PiggyMetrics.Common.DataPointStat), global::PiggyMetrics.Common.DataPointStat.Parser, new[]{ "StatMetric", "Amount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum StatMetric {
    [pbr::OriginalName("SMNONE")] Smnone = 0,
    [pbr::OriginalName("INCOME")] Income = 1,
    [pbr::OriginalName("EXPENSE")] Expense = 2,
    [pbr::OriginalName("SAVING")] Saving = 3,
  }

  #endregion

  #region Messages
  public sealed partial class StatRsp : pb::IMessage<StatRsp> {
    private static readonly pb::MessageParser<StatRsp> _parser = new pb::MessageParser<StatRsp>(() => new StatRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatRsp(StatRsp other) : this() {
      dataPoint_ = other.dataPoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatRsp Clone() {
      return new StatRsp(this);
    }

    /// <summary>Field number for the "data_point" field.</summary>
    public const int DataPointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PiggyMetrics.Common.DataPoint> _repeated_dataPoint_codec
        = pb::FieldCodec.ForMessage(10, global::PiggyMetrics.Common.DataPoint.Parser);
    private readonly pbc::RepeatedField<global::PiggyMetrics.Common.DataPoint> dataPoint_ = new pbc::RepeatedField<global::PiggyMetrics.Common.DataPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PiggyMetrics.Common.DataPoint> DataPoint {
      get { return dataPoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataPoint_.Equals(other.dataPoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataPoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataPoint_.WriteTo(output, _repeated_dataPoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataPoint_.CalculateSize(_repeated_dataPoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatRsp other) {
      if (other == null) {
        return;
      }
      dataPoint_.Add(other.dataPoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dataPoint_.AddEntriesFrom(input, _repeated_dataPoint_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvertReq : pb::IMessage<ConvertReq> {
    private static readonly pb::MessageParser<ConvertReq> _parser = new pb::MessageParser<ConvertReq>(() => new ConvertReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvertReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertReq(ConvertReq other) : this() {
      currencyFrom_ = other.currencyFrom_;
      currencyTo_ = other.currencyTo_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertReq Clone() {
      return new ConvertReq(this);
    }

    /// <summary>Field number for the "currency_from" field.</summary>
    public const int CurrencyFromFieldNumber = 1;
    private global::PiggyMetrics.Common.Currency currencyFrom_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PiggyMetrics.Common.Currency CurrencyFrom {
      get { return currencyFrom_; }
      set {
        currencyFrom_ = value;
      }
    }

    /// <summary>Field number for the "currency_to" field.</summary>
    public const int CurrencyToFieldNumber = 2;
    private global::PiggyMetrics.Common.Currency currencyTo_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PiggyMetrics.Common.Currency CurrencyTo {
      get { return currencyTo_; }
      set {
        currencyTo_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvertReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvertReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyFrom != other.CurrencyFrom) return false;
      if (CurrencyTo != other.CurrencyTo) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyFrom != 0) hash ^= CurrencyFrom.GetHashCode();
      if (CurrencyTo != 0) hash ^= CurrencyTo.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyFrom != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CurrencyFrom);
      }
      if (CurrencyTo != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CurrencyTo);
      }
      if (Amount != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyFrom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyFrom);
      }
      if (CurrencyTo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrencyTo);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvertReq other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyFrom != 0) {
        CurrencyFrom = other.CurrencyFrom;
      }
      if (other.CurrencyTo != 0) {
        CurrencyTo = other.CurrencyTo;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            currencyFrom_ = (global::PiggyMetrics.Common.Currency) input.ReadEnum();
            break;
          }
          case 16: {
            currencyTo_ = (global::PiggyMetrics.Common.Currency) input.ReadEnum();
            break;
          }
          case 25: {
            Amount = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvertRsp : pb::IMessage<ConvertRsp> {
    private static readonly pb::MessageParser<ConvertRsp> _parser = new pb::MessageParser<ConvertRsp>(() => new ConvertRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvertRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertRsp(ConvertRsp other) : this() {
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvertRsp Clone() {
      return new ConvertRsp(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvertRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvertRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvertRsp other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Amount = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemMetric : pb::IMessage<ItemMetric> {
    private static readonly pb::MessageParser<ItemMetric> _parser = new pb::MessageParser<ItemMetric>(() => new ItemMetric());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemMetric(ItemMetric other) : this() {
      title_ = other.title_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemMetric Clone() {
      return new ItemMetric(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Amount != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemMetric other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 17: {
            Amount = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateRsp : pb::IMessage<RateRsp> {
    private static readonly pb::MessageParser<RateRsp> _parser = new pb::MessageParser<RateRsp>(() => new RateRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateRsp(RateRsp other) : this() {
      rates_ = other.rates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateRsp Clone() {
      return new RateRsp(this);
    }

    /// <summary>Field number for the "rates" field.</summary>
    public const int RatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PiggyMetrics.Common.Rate> _repeated_rates_codec
        = pb::FieldCodec.ForMessage(10, global::PiggyMetrics.Common.Rate.Parser);
    private readonly pbc::RepeatedField<global::PiggyMetrics.Common.Rate> rates_ = new pbc::RepeatedField<global::PiggyMetrics.Common.Rate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PiggyMetrics.Common.Rate> Rates {
      get { return rates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rates_.Equals(other.rates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rates_.WriteTo(output, _repeated_rates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rates_.CalculateSize(_repeated_rates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateRsp other) {
      if (other == null) {
        return;
      }
      rates_.Add(other.rates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rates_.AddEntriesFrom(input, _repeated_rates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rate : pb::IMessage<Rate> {
    private static readonly pb::MessageParser<Rate> _parser = new pb::MessageParser<Rate>(() => new Rate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rate(Rate other) : this() {
      currency_ = other.currency_;
      rate_ = other.rate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rate Clone() {
      return new Rate(this);
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 1;
    private global::PiggyMetrics.Common.Currency currency_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PiggyMetrics.Common.Currency Currency {
      get { return currency_; }
      set {
        currency_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int Rate_FieldNumber = 2;
    private double rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rate_ {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Currency != other.Currency) return false;
      if (Rate_ != other.Rate_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Currency != 0) hash ^= Currency.GetHashCode();
      if (Rate_ != 0D) hash ^= Rate_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Currency != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Currency);
      }
      if (Rate_ != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Rate_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Currency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Currency);
      }
      if (Rate_ != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rate other) {
      if (other == null) {
        return;
      }
      if (other.Currency != 0) {
        Currency = other.Currency;
      }
      if (other.Rate_ != 0D) {
        Rate_ = other.Rate_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            currency_ = (global::PiggyMetrics.Common.Currency) input.ReadEnum();
            break;
          }
          case 17: {
            Rate_ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataPoint : pb::IMessage<DataPoint> {
    private static readonly pb::MessageParser<DataPoint> _parser = new pb::MessageParser<DataPoint>(() => new DataPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint(DataPoint other) : this() {
      account_ = other.account_;
      date_ = other.date_;
      incomes_ = other.incomes_.Clone();
      expenses_ = other.expenses_.Clone();
      stat_ = other.stat_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint Clone() {
      return new DataPoint(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 2;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "incomes" field.</summary>
    public const int IncomesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PiggyMetrics.Common.ItemMetric> _repeated_incomes_codec
        = pb::FieldCodec.ForMessage(26, global::PiggyMetrics.Common.ItemMetric.Parser);
    private readonly pbc::RepeatedField<global::PiggyMetrics.Common.ItemMetric> incomes_ = new pbc::RepeatedField<global::PiggyMetrics.Common.ItemMetric>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PiggyMetrics.Common.ItemMetric> Incomes {
      get { return incomes_; }
    }

    /// <summary>Field number for the "expenses" field.</summary>
    public const int ExpensesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PiggyMetrics.Common.ItemMetric> _repeated_expenses_codec
        = pb::FieldCodec.ForMessage(34, global::PiggyMetrics.Common.ItemMetric.Parser);
    private readonly pbc::RepeatedField<global::PiggyMetrics.Common.ItemMetric> expenses_ = new pbc::RepeatedField<global::PiggyMetrics.Common.ItemMetric>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PiggyMetrics.Common.ItemMetric> Expenses {
      get { return expenses_; }
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PiggyMetrics.Common.DataPointStat> _repeated_stat_codec
        = pb::FieldCodec.ForMessage(42, global::PiggyMetrics.Common.DataPointStat.Parser);
    private readonly pbc::RepeatedField<global::PiggyMetrics.Common.DataPointStat> stat_ = new pbc::RepeatedField<global::PiggyMetrics.Common.DataPointStat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PiggyMetrics.Common.DataPointStat> Stat {
      get { return stat_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Date != other.Date) return false;
      if(!incomes_.Equals(other.incomes_)) return false;
      if(!expenses_.Equals(other.expenses_)) return false;
      if(!stat_.Equals(other.stat_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      hash ^= incomes_.GetHashCode();
      hash ^= expenses_.GetHashCode();
      hash ^= stat_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Date);
      }
      incomes_.WriteTo(output, _repeated_incomes_codec);
      expenses_.WriteTo(output, _repeated_expenses_codec);
      stat_.WriteTo(output, _repeated_stat_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      size += incomes_.CalculateSize(_repeated_incomes_codec);
      size += expenses_.CalculateSize(_repeated_expenses_codec);
      size += stat_.CalculateSize(_repeated_stat_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPoint other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      incomes_.Add(other.incomes_);
      expenses_.Add(other.expenses_);
      stat_.Add(other.stat_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Date = input.ReadString();
            break;
          }
          case 26: {
            incomes_.AddEntriesFrom(input, _repeated_incomes_codec);
            break;
          }
          case 34: {
            expenses_.AddEntriesFrom(input, _repeated_expenses_codec);
            break;
          }
          case 42: {
            stat_.AddEntriesFrom(input, _repeated_stat_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataPointStat : pb::IMessage<DataPointStat> {
    private static readonly pb::MessageParser<DataPointStat> _parser = new pb::MessageParser<DataPointStat>(() => new DataPointStat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPointStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PiggyMetrics.Common.StatisticsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPointStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPointStat(DataPointStat other) : this() {
      statMetric_ = other.statMetric_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPointStat Clone() {
      return new DataPointStat(this);
    }

    /// <summary>Field number for the "stat_metric" field.</summary>
    public const int StatMetricFieldNumber = 1;
    private global::PiggyMetrics.Common.StatMetric statMetric_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PiggyMetrics.Common.StatMetric StatMetric {
      get { return statMetric_; }
      set {
        statMetric_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private double amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPointStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPointStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatMetric != other.StatMetric) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatMetric != 0) hash ^= StatMetric.GetHashCode();
      if (Amount != 0D) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatMetric != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatMetric);
      }
      if (Amount != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatMetric != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatMetric);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPointStat other) {
      if (other == null) {
        return;
      }
      if (other.StatMetric != 0) {
        StatMetric = other.StatMetric;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            statMetric_ = (global::PiggyMetrics.Common.StatMetric) input.ReadEnum();
            break;
          }
          case 17: {
            Amount = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
