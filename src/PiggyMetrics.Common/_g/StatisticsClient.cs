// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/statistics.proto
#region Designer generated code

using System; 
using System.Threading.Tasks; 
using DotBPE.Rpc; 
using DotBPE.Protocol.Amp; 
using DotBPE.Rpc.Exceptions; 
using Google.Protobuf; 

namespace PiggyMetrics.Common {

//start for class StatisticsServiceClient
public sealed class StatisticsServiceClient : AmpInvokeClient 
{
public StatisticsServiceClient(IRpcClient<AmpMessage> client) : base(client)
{
}
public async Task<VoidRsp> UpdateStatisticsAsync(Account request,int timeOut=3000)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1003, 1);
message.Data = request.ToByteArray();
var response = await base.CallInvoker.AsyncCall(message,timeOut);
if (response != null && response.Data !=null)
{
return VoidRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}

//同步方法
public VoidRsp UpdateStatistics(Account request)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1003, 1);
message.Data = request.ToByteArray();
var response =  base.CallInvoker.BlockingCall(message);
if (response != null && response.Data !=null)
{
return VoidRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}
public async Task<StatRsp> FindByAccountAsync(FindAccountReq request,int timeOut=3000)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1003, 1);
message.Data = request.ToByteArray();
var response = await base.CallInvoker.AsyncCall(message,timeOut);
if (response != null && response.Data !=null)
{
return StatRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}

//同步方法
public StatRsp FindByAccount(FindAccountReq request)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1003, 1);
message.Data = request.ToByteArray();
var response =  base.CallInvoker.BlockingCall(message);
if (response != null && response.Data !=null)
{
return StatRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}
}
//end for class StatisticsServiceClient

//start for class ExchangeServiceClient
public sealed class ExchangeServiceClient : AmpInvokeClient 
{
public ExchangeServiceClient(IRpcClient<AmpMessage> client) : base(client)
{
}
public async Task<RateRsp> GetRatesAsync(VoidReq request,int timeOut=3000)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1004, 1);
message.Data = request.ToByteArray();
var response = await base.CallInvoker.AsyncCall(message,timeOut);
if (response != null && response.Data !=null)
{
return RateRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}

//同步方法
public RateRsp GetRates(VoidReq request)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1004, 1);
message.Data = request.ToByteArray();
var response =  base.CallInvoker.BlockingCall(message);
if (response != null && response.Data !=null)
{
return RateRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}
public async Task<ConvertRsp> ConvertAsync(ConvertReq request,int timeOut=3000)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1004, 2);
message.Data = request.ToByteArray();
var response = await base.CallInvoker.AsyncCall(message,timeOut);
if (response != null && response.Data !=null)
{
return ConvertRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}

//同步方法
public ConvertRsp Convert(ConvertReq request)
{
AmpMessage message = AmpMessage.CreateRequestMessage(1004, 2);
message.Data = request.ToByteArray();
var response =  base.CallInvoker.BlockingCall(message);
if (response != null && response.Data !=null)
{
return ConvertRsp.Parser.ParseFrom(response.Data);
}
throw new RpcException("请求出错，请检查!");
}
}
//end for class ExchangeServiceClient
}
#endregion
